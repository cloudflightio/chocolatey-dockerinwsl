#!/bin/bash

# Copyright © 2021 Keiichi Shimamura (@sakai135)
# Copyright @ 2022 Cloudflight GmbH (@cloudflightio)

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the “Software”), to deal in the
# Software without restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the
# following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
# USE OR OTHER DEALINGS IN THE SOFTWARE.

set -eo pipefail

# shellcheck source=../../../etc/DockerInWsl/diw-commons.sh
. /etc/DockerInWsl/diw-commons.sh
_diw_plugin_globalvars

CONF_PATH="/etc/DockerInWsl/wsl-vpnkit.conf"

GVPROXY_PATH="$DIW_DRIVERDIR/wsl-gvproxy.exe"
VM_PID=

log "starting wsl-vpnkit"

# Load defaults
if [ -f "/etc/vpnkit/defaults.conf" ]; then
  # shellcheck source=../../../etc/vpnkit/defaults.conf
  . /etc/vpnkit/defaults.conf
fi

#  Load user config if needed
if [ -f "$CONF_PATH" ]; then
  . "$CONF_PATH"
  log "loaded config: $CONF_PATH"
fi

# set defaults if variable is not already set
TAP_NAME=${TAP_NAME:-$DEFAULT_TAP_NAME}
VPNKIT_SUBNET=${VPNKIT_SUBNET:-$DEFAULT_VPNKIT_SUBNET}
VPNKIT_GATEWAY_IP=${VPNKIT_GATEWAY_IP:-$DEFAULT_VPNKIT_GATEWAY_IP}
VPNKIT_HOST_IP=${VPNKIT_HOST_IP:-$DEFAULT_VPNKIT_HOST_IP}
VPNKIT_LOWEST_IP=${VPNKIT_LOWEST_IP:-$DEFAULT_VPNKIT_LOWEST_IP}
VPNKIT_DEBUG=${VPNKIT_DEBUG:-$DEFAULT_VPNKIT_DEBUG}
DNS_IP=${DNS_IP:-$DEFAULT_DNS_IP}

WSL2_GATEWAY_INTERFACE="eth0"
WSL2_GATEWAY_SUBNET="$(get_interface_subnet $WSL2_GATEWAY_INTERFACE)"
WSL2_GATEWAY_IP="$(get_interface_gateway_ip "$WSL2_GATEWAY_INTERFACE")"
WSL2_TAP_NAME=eth0
WSL2_VM_IP="$(get_interface_ip "$WSL2_TAP_NAME")"

run () {
    log "starting gvproxy at $GVPROXY_PATH..."
    wsl-vm \
      -path "$GVPROXY_PATH" \
      -iface "$TAP_NAME" \
      -subnet "$VPNKIT_SUBNET" \
      -gateway-ip "$VPNKIT_GATEWAY_IP" \
      -host-ip "$VPNKIT_HOST_IP" \
      -vm-ip "$VPNKIT_LOWEST_IP" \
      -debug="$VPNKIT_DEBUG" &
    VM_PID=$!
    log "started gvproxy"
    systemd-notify --status="gvproxy started"
}

tap_wait () {
    log "waiting for dhcp..."
    c=1
    d=0
    set +eo pipefail
    while [ "$c" -eq 1 ] && [ "$d" -eq 0 ]; do
        sleep 0.1
        ip a s "$TAP_NAME" | grep -E -o 'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
        c=$?
        kill -0 $VM_PID
        d=$?
    done
    if [ "$d" -eq 1 ]; then
        log "wsl-vm exited"
        exit 1
    fi
    set -eo pipefail
    log "dhcp completed"
    systemd-notify --status="dhcp completed"
}

ipconfig () {
    log "configuring ip..."
    ip a add "$VPNKIT_LOWEST_IP/$WSL2_GATEWAY_SUBNET" dev "$TAP_NAME" || true
    ip link set dev "$TAP_NAME" up
    ip route | grep -e "$VPNKIT_GATEWAY_IP" -e 'default' | tr '\n' '\0' | xargs -0 -n 1 sh -c 'ip route del $1' argv0
    ip route replace default via "$VPNKIT_GATEWAY_IP" dev "$TAP_NAME"
    log "ip config done"

    log "adding rules to iptables..."
    iptables -t nat -A PREROUTING -d "$WSL2_GATEWAY_IP/32" -p udp -m udp --dport 53 -j DNAT --to-destination "$DNS_IP:53"
    iptables -t nat -A PREROUTING -d "$WSL2_GATEWAY_IP/32" -p tcp -m tcp --dport 53 -j DNAT --to-destination "$DNS_IP:53"
    iptables -t nat -A PREROUTING -d "$WSL2_GATEWAY_IP/32" -j DNAT --to-destination "$VPNKIT_HOST_IP"
    iptables -t nat -A OUTPUT -d "$WSL2_GATEWAY_IP/32" -p udp -m udp --dport 53 -j DNAT --to-destination "$DNS_IP:53"
    iptables -t nat -A OUTPUT -d "$WSL2_GATEWAY_IP/32" -p tcp -m tcp --dport 53 -j DNAT --to-destination "$DNS_IP:53"
    iptables -t nat -A OUTPUT -d "$WSL2_GATEWAY_IP/32" -j DNAT --to-destination "$VPNKIT_HOST_IP"
    iptables -t nat -A POSTROUTING -o "$TAP_NAME" -j MASQUERADE
    echo "iptables done"

    echo "iptables cleanup ..."
    iptables-save | awk 'substr($0,1,1)!="-" || !x[$0]++' | iptables-restore
    echo "iptables cleanup done"
    systemd-notify --status="ipconfig completed"
}

cleanup () {
    set +eo pipefail
    log "cleaning up iptables..."
    iptables -t nat -S | grep "$VPNKIT_GATEWAY_IP" | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    iptables -t nat -S | grep "$VPNKIT_HOST_IP" | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    iptables -t nat -S | grep "$TAP_NAME" | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    iptables -t nat -S | grep "$DNS_IP" | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    log "iptables cleanup done"

    log "cleaning up ip..."
    ip route | grep -e "$VPNKIT_GATEWAY_IP" -e 'default' | tr '\n' '\0' | xargs -r -0 -n 1 sh -c 'ip route del $1' argv0
    ip link set dev "$TAP_NAME" down || true
    ip link delete "$TAP_NAME" || true
    ip addr add "$WSL2_VM_IP/$WSL2_GATEWAY_SUBNET" dev "$WSL2_TAP_NAME"
    ip route add default via "$WSL2_GATEWAY_IP" dev "$WSL2_TAP_NAME"
    log "ip cleanup done"

    set -eo pipefail
    $CMDSHELL /V:OFF /C 'taskkill /F /T /IM wsl-gvproxy.exe' 2>/dev/null || :
}

close () {
    systemd-notify --stopping
    cleanup
    log "stopped wsl-vpnkit"
    kill 0
}

if [ "$(id -u)" -ne "0" ]; then
    log "Please run this script as root"
    exit 1
fi

cleanup
run
tap_wait
ipconfig

systemd-notify --ready

trap close exit
trap exit int term
wait
