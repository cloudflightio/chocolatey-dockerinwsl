#!/bin/bash

# Copyright © 2021 Keiichi Shimamura (@sakai135)
# Copyright @ 2022 Cloudflight GmbH (@cloudflightio)

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the “Software”), to deal in the
# Software without restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the
# following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
# USE OR OTHER DEALINGS IN THE SOFTWARE.

set -eo pipefail

# shellcheck source=../../../usr/local/lib/dockerinwsl/commons.sh
. /usr/local/lib/dockerinwsl/commons.sh
_diw_plugin_globalvars

CONF_PATH="/etc/DockerInWsl/wsl-vpnkit.conf"

log "starting wsl-vpnkit"

#  Load user config if needed
if [ -f "$CONF_PATH" ]; then
  . "$CONF_PATH"
  log "loaded config: $CONF_PATH"
fi

# set defaults if variable is not already set
DNS_IP=${DNS_IP:-192.168.67.3}
PID_FILE=${PID_FILE:-/run/wsl-vm}

# hardcoded in gvisor-tap-vsock
VPNKIT_GATEWAY_IP=${VPNKIT_GATEWAY_IP:-192.168.127.1}
VPNKIT_HOST_IP=${VPNKIT_HOST_IP:-192.168.127.254}
VPNKIT_LOCAL_IP=${VPNKIT_LOCAL_IP:-192.168.127.2}
TAP_MAC_ADDR=${TAP_MAC_ADDR:-5a:94:ef:e4:0c:ee}

# overrideable with env
VMEXEC_PATH=${VMEXEC_PATH:-/usr/local/bin/wsl-vm}
GVPROXY_PATH=${GVPROXY_PATH:-$DIW_DRIVERDIR/wsl-gvproxy.exe}
TAP_NAME=${TAP_NAME:-eth1}
CHECK_HOST=${CHECK_HOST:-example.com}
CHECK_DNS=${CHECK_DNS:-1.1.1.1}
DEBUG=${DEBUG:-0}

WSL2_TAP_NAME=${WSL2_TAP_NAME:-eth0}
WSL2_RESOLVCONF_DEFAULT="/mnt/wsl/resolv.conf"
if [ ! -f "$WSL2_RESOLVCONF_DEFAULT" ]; then
    WSL2_RESOLVCONF_DEFAULT="/etc/resolv.conf"
fi
WSL2_RESOLVCONF=${WSL2_RESOLVCONF:-$WSL2_RESOLVCONF_DEFAULT}
WSL2_GATEWAY_IP_FROM_RESOLVCONF="$(awk '/^nameserver/ {print $2}' < "$WSL2_RESOLVCONF")"
WSL2_GATEWAY_IP=${WSL2_GATEWAY_IP:-$WSL2_GATEWAY_IP_FROM_RESOLVCONF}

# show values
echo WSL2_TAP_NAME="$WSL2_TAP_NAME"
echo WSL2_GATEWAY_IP="$WSL2_GATEWAY_IP"

if [ "$DEBUG" != "0" ]; then
    set +x
fi

run () {
    log "starting gvproxy at $GVPROXY_PATH..."
    $VMEXEC_PATH \
      -url="stdio:$GVPROXY_PATH?listen-stdio=accept&debug=$DEBUG" \
      -iface="$TAP_NAME" \
      -stop-if-exist="" \
      -preexisting=1 \
      -debug="$DEBUG" \
      -pid-file="$PID_FILE" &
    log "started gvproxy"
    systemd-notify --status="gvproxy started"
}

wsl2tap_down () {
    # remove WSL2 default route
    ip route del default

    # setup wsl-vpnkit tap
    ip tuntap add "$TAP_NAME" mode tap
    ip link set dev "$TAP_NAME" address "$TAP_MAC_ADDR"
    ip link set dev "$TAP_NAME" up
    ip addr add "$VPNKIT_LOCAL_IP/255.255.255.0" dev "$TAP_NAME"
    ip route add default via "$VPNKIT_GATEWAY_IP" dev "$TAP_NAME"

    systemd-notify --status="wsl2tap down"
}

wsl2tap_up () {
    # take down wsl-vpnkit tap
    ip link set dev "$TAP_NAME" down 2>/dev/null
    ip tuntap del "$TAP_NAME" mode tap

    # add WSL2 default route
    ip route add default via "$WSL2_GATEWAY_IP" dev "$WSL2_TAP_NAME" 2>/dev/null

    systemd-notify --status="wsl2tap up"
}

iptables_set () {
    log "adding rules to iptables..."
    iptables -t nat "-$1" PREROUTING -d "$WSL2_GATEWAY_IP/32" -p udp -m udp --dport 53 -j DNAT --to-destination "$VPNKIT_GATEWAY_IP:53"
    iptables -t nat "-$1" PREROUTING -d "$WSL2_GATEWAY_IP/32" -p tcp -m tcp --dport 53 -j DNAT --to-destination "$VPNKIT_GATEWAY_IP:53"
    iptables -t nat "-$1" PREROUTING -d "$WSL2_GATEWAY_IP/32" -j DNAT --to-destination "$VPNKIT_HOST_IP"
    iptables -t nat "-$1" OUTPUT -d "$WSL2_GATEWAY_IP/32" -p udp -m udp --dport 53 -j DNAT --to-destination "$VPNKIT_GATEWAY_IP:53"
    iptables -t nat "-$1" OUTPUT -d "$WSL2_GATEWAY_IP/32" -p tcp -m tcp --dport 53 -j DNAT --to-destination "$VPNKIT_GATEWAY_IP:53"
    iptables -t nat "-$1" OUTPUT -d "$WSL2_GATEWAY_IP/32" -j DNAT --to-destination "$VPNKIT_HOST_IP"
    iptables -t nat "-$1" POSTROUTING -o "$TAP_NAME" -j MASQUERADE
    log "iptables done"

    log "iptables cleanup ..."
    iptables-save | awk 'substr($0,1,1)!="-" || !x[$0]++' | iptables-restore
    log "iptables cleanup done"
    systemd-notify --status="ipconfig completed"
}

cleanup () {
    iptables_set D 2>/dev/null
    wsl2tap_up
    systemd-notify --status="cleanup done"
}

close () {
    systemd-notify --stopping
    pkill -F "$PID_FILE" 
    cleanup
    log "stopped wsl-vpnkit"
    kill 0
}

if [ ${EUID:-$(id -u)} -ne 0 ]; then
    echo "Please run this script as root"
    exit 1
fi
if [ ! -f "$VMEXEC_PATH" ]; then
    echo "VMEXEC_PATH [$VMEXEC_PATH] does not exist"
    exit 1
fi
if [ ! -f "$GVPROXY_PATH" ]; then
    echo "GVPROXY_PATH [$GVPROXY_PATH] does not exist"
    exit 1
fi
grep "automatically generated by WSL" < "$WSL2_RESOLVCONF" >/dev/null
if [ $? -eq 1 ]; then
    echo "resolv.conf has been modified without setting generateResolvConf"
fi
$GVPROXY_PATH -help 2>/dev/null
if [ $? -eq 1 ]; then
    echo "$GVPROXY_PATH is not executable due to WSL interop settings or Windows permissions"
    exit 1
fi

# trap first so close runs even if the rest of the commands fail
trap close exit
trap exit int term

# run cleanup to restore any leftover configuration changes
cleanup

wsl2tap_down
run
iptables_set A

systemd-notify --ready
wait
