#!/bin/bash

# Copyright © 2021 Keiichi Shimamura (@sakai135)
# Copyright @ 2022 Cloudflight GmbH (@cloudflightio)

# Permission is hereby granted, free of charge, to any person obtaining a copy of 
# this software and associated documentation files (the “Software”), to deal in the 
# Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
# and to permit persons to whom the Software is furnished to do so, subject to the 
# following conditions:
# The above copyright notice and this permission notice shall be included in all 
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS 
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE 
# USE OR OTHER DEALINGS IN THE SOFTWARE.

set -eo pipefail
. /etc/DockerInWsl/diw-commons.sh
_diw_plugin_globalvars

CONF_PATH="$LOCALAPPDATA/DockerInWSL/wsl-vpnkit/wsl-vpnkit.conf"
HTTP_PROXY_CONFIG_PATH="$LOCALAPPDATA/DockerInWSL/wsl-vpnkit/http-proxy.json"
SOCKET_PATH="/var/run/wsl-vpnkit.sock"
PIPE_PATH="//./pipe/wsl-vpnkit"
TAP_PID_PATH="/var/run/vpnkit-tap-vsockd.pid"

VPNKIT_PATH="$PROGRAMFILES/DockerInWSL/vpnkit.exe"
NPIPERELAY_PATH="$PROGRAMFILES/DockerInWSL/npiperelay.exe"

echo "starting wsl-vpnkit"

# Load defaults
if [ -f "/etc/vpnkit/defaults.conf" ]; then
  . /etc/vpnkit/defaults.conf
fi

#  Load user config if needed
if [ -f "$CONF_PATH" ]; then
  . "$CONF_PATH"
  echo "loaded config: $CONF_PATH"
fi

# set defaults if variable is not already set
TAP_NAME=${TAP_NAME:-$DEFAULT_TAP_NAME}
VPNKIT_GATEWAY_IP=${VPNKIT_GATEWAY_IP:-$DEFAULT_VPNKIT_GATEWAY_IP}
VPNKIT_HOST_IP=${VPNKIT_HOST_IP:-$DEFAULT_VPNKIT_HOST_IP}
VPNKIT_LOWEST_IP=${VPNKIT_LOWEST_IP:-$DEFAULT_VPNKIT_LOWEST_IP}
VPNKIT_HIGHEST_IP=${VPNKIT_HIGHEST_IP:-$DEFAULT_VPNKIT_HIGHEST_IP}
VPNKIT_DEBUG=${VPNKIT_DEBUG:-$DEFAULT_VPNKIT_DEBUG}
VPNKIT_PORT_MAX_IDLE=${VPNKIT_PORT_MAX_IDLE:-$DEFAULT_VPNKIT_PORT_MAX_IDLE}
CHECK_DNS=${CHECK_DNS:-$DEFAULT_CHECK_DNS}
CHECK_HOST=${CHECK_HOST:-$DEFAULT_CHECK_HOST}
DNS_IP=${DNS_IP:-$DEFAULT_DNS_IP}

VPNKIT_WSL2_IP="$VPNKIT_LOWEST_IP"
WSL2_GATEWAY_IP="$(cat /etc/resolv.conf | awk '/^nameserver/ {print $2}')"

relay () {
    echo "starting socat-npiperelay..."
    NPIPERELAY_SOCAT_PATH=/run/npiperelay.exe
    ln -sf "$NPIPERELAY_PATH" "$NPIPERELAY_SOCAT_PATH"
    echo "using $NPIPERELAY_SOCAT_PATH for npiperelay.exe"
    socat UNIX-LISTEN:$SOCKET_PATH,fork,umask=007 EXEC:"$NPIPERELAY_SOCAT_PATH -ep -s $PIPE_PATH",nofork
}

relay_wait () {
    echo "waiting for $SOCKET_PATH ..."
    while [ ! -S "$SOCKET_PATH" ]; do
        sleep 0.1
    done
    echo "found $SOCKET_PATH"
}

vpnkit () {
    echo "starting vpnkit..."
    WIN_PIPE_PATH=$(echo $PIPE_PATH | sed -e "s:/:\\\:g")
    
    CMD="\"$VPNKIT_PATH\" \
        --ethernet '$WIN_PIPE_PATH' \
        --gateway-ip '$VPNKIT_GATEWAY_IP' \
        --host-ip '$VPNKIT_HOST_IP' \
        --lowest-ip '$VPNKIT_LOWEST_IP' \
        --highest-ip '$VPNKIT_HIGHEST_IP' \
        --port-max-idle-time '$VPNKIT_PORT_MAX_IDLE' \
    "
    if [ "$VPNKIT_DEBUG" ]; then
        CMD="$CMD"' --debug'
    fi
    if [ -f "$HTTP_PROXY_CONFIG_PATH" ]; then
        WIN_HTTP_PROXY_CONFIG_PATH=$(wslpath -m "$HTTP_PROXY_CONFIG_PATH")
        echo "using $WIN_HTTP_PROXY_CONFIG_PATH"
        CMD="$CMD"" --http '$WIN_HTTP_PROXY_CONFIG_PATH'"
    fi
    echo "eval: $CMD"
    eval "$CMD"
}

tap () {
    echo "starting vpnkit-tap-vsockd..."
    vpnkit-tap-vsockd --tap "$TAP_NAME" --path $SOCKET_PATH --daemon --pid $TAP_PID_PATH
    echo "started vpnkit-tap-vsockd"
}

ipconfig () {
    echo "configuring ip..."
    ip a add "$VPNKIT_WSL2_IP/255.255.255.0" dev "$TAP_NAME" || true
    ip link set dev "$TAP_NAME" up
    ip route | grep -e "$VPNKIT_GATEWAY_IP" -e 'default' | tr '\n' '\0' | xargs -0 -n 1 sh -c 'ip route del $1' argv0
    ip route replace default via "$VPNKIT_GATEWAY_IP" dev "$TAP_NAME"
    echo "ip config done"

    echo "adding rules to iptables..."
    iptables -t nat -A PREROUTING -d "$WSL2_GATEWAY_IP/32" -p udp -m udp --dport 53 -j DNAT --to-destination "$DNS_IP:53"
    iptables -t nat -A PREROUTING -d "$WSL2_GATEWAY_IP/32" -p tcp -m tcp --dport 53 -j DNAT --to-destination "$DNS_IP:53"
    iptables -t nat -A PREROUTING -d "$WSL2_GATEWAY_IP/32" -j DNAT --to-destination "$VPNKIT_HOST_IP"
    iptables -t nat -A OUTPUT -d "$WSL2_GATEWAY_IP/32" -p udp -m udp --dport 53 -j DNAT --to-destination "$DNS_IP:53"
    iptables -t nat -A OUTPUT -d "$WSL2_GATEWAY_IP/32" -p tcp -m tcp --dport 53 -j DNAT --to-destination "$DNS_IP:53"
    iptables -t nat -A OUTPUT -d "$WSL2_GATEWAY_IP/32" -j DNAT --to-destination "$VPNKIT_HOST_IP"
    iptables -t nat -A POSTROUTING -o "$TAP_NAME" -j MASQUERADE
    echo "iptables done"

    echo "iptables cleanup ..."
    iptables-save | awk 'substr($0,1,1)!="-" || !x[$0]++' | iptables-restore
    echo "iptables cleanup done"
}

check_ping () {
    ping "-$1" -c 1 "$3" >/dev/null && \
        echo "check: ✔️ ping success to IPv$1 $2 ($3)" || \
        echo "check: $([ $1 = '6' ] && echo '➖' || echo '❌') ping fail to IPv$1 $2 ($3)"
}

check_dns () {
    TYPE=$([ "$1" = "4" ] && echo 'A' || echo 'AAAA')
    nslookup "-type=$TYPE" "$2" "$3" >/dev/null && \
        echo "check: ✔️ nslookup success for $2 $TYPE using $3" || \
        echo "check: ❌ nslookup fail for $2 $TYPE using $3"
}

check_https () {
    wget --spider -q $1 && \
        echo "check: ✔️ wget success for $1" || \
        echo "check: ❌ wget fail for $1"
}

check () {
    check_ping 4 'WSL 2 gateway / Windows host' "$WSL2_GATEWAY_IP"
    check_ping 4 'VPNKit Windows host' "$VPNKIT_HOST_IP"
    check_ping 4 'VPNKit gateway' "$VPNKIT_GATEWAY_IP"
    check_dns 4 "$CHECK_HOST" "$DNS_IP"
    check_dns 4 "$CHECK_HOST" "$VPNKIT_GATEWAY_IP"
    check_dns 4 "$CHECK_HOST" "$WSL2_GATEWAY_IP"
    check_dns 4 "$CHECK_HOST" "$CHECK_DNS"
    check_ping 4 'external host' "$CHECK_HOST"
    check_dns 6 "$CHECK_HOST" "$DNS_IP"
    check_dns 6 "$CHECK_HOST" "$VPNKIT_GATEWAY_IP"
    check_dns 6 "$CHECK_HOST" "$WSL2_GATEWAY_IP"
    check_dns 6 "$CHECK_HOST" "$CHECK_DNS"
    check_ping 6 'external host' "$CHECK_HOST"
    check_https "https://$CHECK_HOST"
}

cleanup () {
    set +eo pipefail
    echo "cleaning up iptables..."
    iptables -t nat -S | grep "$VPNKIT_GATEWAY_IP" | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    iptables -t nat -S | grep "$VPNKIT_HOST_IP" | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    iptables -t nat -S | grep "$TAP_NAME" | cut -d " " -f 2- | tr '\n' '\0' | xargs -0 -r -n 1 sh -c 'iptables -t nat -D $1' argv0
    echo "iptables cleanup done"

    echo "cleaning up ip..."
    ip route | grep -e "$VPNKIT_GATEWAY_IP" -e 'default' | tr '\n' '\0' | xargs -r -0 -n 1 sh -c 'ip route del $1' argv0
    ip link set dev "$TAP_NAME" down || true
    ip route add default via "$WSL2_GATEWAY_IP" dev eth0
    echo "ip cleanup done"

    if [ -f "$TAP_PID_PATH" ]; then
        echo "stopping vpnkit-tap-vsockd"
        kill -- "-$(cat $TAP_PID_PATH)" || true
        echo "stopped vpnkit-tap-vsockd"
    fi
    set -eo pipefail
    $CMDSHELL /V:OFF /C 'taskkill /F /T /IM vpnkit.exe' 2>/dev/null || :
}

close () {
    cleanup
    echo "stopped wsl-vpnkit"
    kill 0
}

if [ "$(id -u)" -ne "0" ]; then
    echo "Please run this script as root"
    exit 1
fi

cleanup
relay &
relay_wait
vpnkit &
tap
ipconfig
check
trap close EXIT
trap exit INT TERM
wait
